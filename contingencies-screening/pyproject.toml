# A pyproject.toml based on the latest standards for packaging (PEPs 517, 518,
# 621), which decouple packaging building from package internal structure and
# installation.  In our case we will continue to use setuptools as the
# underlying build back-end, but the new standard allows us to:
#
#   - get rid of setup.py and setup.cfg
#   - get rid of MANIFEST.in (include data files here via the package-data entry)
#   - install less things in our venv: only "pip" and "build" are needed, and
#     then "build" will install anything else it needs (setuptools and wheel) in
#     a temporary venv.
#
#
# Reminder of the main steps:
#    python3 -m venv dr_venv
#    source dr_venv/bin/activate
#    pip install --upgrade pip build
#    python -m build --wheel
#


[build-system]
requires = ["setuptools>=65"]
build-backend = "setuptools.build_meta"


[project]
# Metadata:
name = "dynawo_contingencies_screening"
version = "0.0.1"
description = "A tool to screen large contingency databases"
authors = [
    {name="Guiu Oms", email="omsg@aia.es"},
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.10"
keywords = ["Screening", "Dynawo"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent"
]
urls = {"Code repo"="https://github.com/grupoaia/dynawo_contingencies_screening", "Bug tracker"="https://github.com/grupoaia/dynawo_contingencies_screening"}
# Required packages:
dependencies = [
    "lxml>=4.6.3",
    "pandas>=2.0.0",
    "scikit-learn>=1.2.0",
    "numpy>=1.23.0",
]


# Data files: the default (include_package_data=True) is for setuptools to
# consider **all** non .py files found inside the package directory as data
# files, and include them if they are in the MANIFEST.in file.  Instead, we
# remove the MANIFEST.in file altogether, and explicitly list here which files
# we want to include as data, because we have very few:
#[tool.setuptools.package-data]
#dynawo_replay = ["..."]



# Entry points and automatic script creation:
[project.scripts]
check_basecase_dir = "dynawo_contingencies_screening.contingencies_screening:check_basecase_dir"
run_contingencies_screening = "dynawo_contingencies_screening.contingencies_screening:run_contingencies_screening"
train_test_loadflow_results = "dynawo_contingencies_screening.analyze_loadflow.machine_learning_analysis:train_test_loadflow_results"



